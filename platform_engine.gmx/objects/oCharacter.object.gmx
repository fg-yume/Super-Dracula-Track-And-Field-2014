<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCharMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>oSilhouetted</parentName>
  <maskName>sCharMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>texty = instance_create(x,y,oText);

LoadFMOD();
FMODinit(100, false);

music1 = FMODSoundAdd("music/music.ogg", false, false);
FMODSoundSetGroup(music1,3);

hit = FMODSoundAdd("music/hit.wav", false, false);
FMODSoundSetGroup(hit,3);

collect = FMODSoundAdd("music/collect.wav", false, false);
FMODSoundSetGroup(collect,3);

jump = FMODSoundAdd("music/jump.wav", false, false);
FMODSoundSetMaxVolume(jump,.5);
FMODSoundSetGroup(jump,3);

boing = FMODSoundAdd("music/boing.wav", false, false);
FMODSoundSetMaxVolume(boing,.6);
FMODSoundSetGroup(boing,3);

port = FMODSoundAdd("music/teleport.wav", false, false);
FMODSoundSetMaxVolume(port,.8);
FMODSoundSetGroup(port,3);

freeze = FMODSoundAdd("music/freeze.wav", false, false);
FMODSoundSetMaxVolume(freeze,.8);
FMODSoundSetGroup(freeze,3);

shatter = FMODSoundAdd("music/shatter.wav", false, false);
FMODSoundSetGroup(shatter,3);

ending = FMODSoundAdd("music/end.wav", false, false);
FMODSoundSetGroup(ending,3);


/*sFrozen = sprite_add_alpha("music/frozen.png",1,0,1,0,0);
sWindow3 = sprite_add_alpha("music/window3.png",1,0,1,0,0);
sWindow = sprite_add_alpha("music/window.png",1,0,1,0,0);
sWindow5 = sprite_add_alpha("music/window5.png",1,0,1,0,0);
sWindowSmall = sprite_add_alpha("music/windowSmall.png",1,0,1,0,0);
sWindowSlant = sprite_add_alpha("music/windowSlant.png",1,0,1,0,0);
sFactoryWindow = sprite_add_alpha("music/factorywindow.png",1,0,1,0,0);*/



//instance_create(x,y,oBackground);
//instance_create(x,y,oScreen);

oCharacter.apocalevel = 0;

//character stat variables (set to defaults here)
maxspeed = 4; //maximum speed on ground
accel = 2; //acceleration on ground
decel = 2; //rate of deceleration on the ground

jumpspeed = 6; //strength of jumps
maxjumpcount = 6;
jumpcount = maxjumpcount;
jumping = 0;

grav = 1; //gravity
maxairspeed = 4; //maximum speed in air
air_accel = 1; //acceleration in the air
air_decel = 1; //rate of deceleration in the air
maxfallspeed = 12; //the maximum speed at which the character falls naturally
minfallspeed = 12; //the maximum speed at which the character moves up naturally
fastfall_accel = 0;

//movement-related variables
xscale = 1; //direction character faces. 1 is right, -1 is left.
xmomentum = 0; //horizontal movement
ymomentum = 0; //vertical movement
onground = 0; //1 if the character is on solid ground
jump_forgiveness = 0; //allows character to jump immediately after walking off a platform

stun = 0;
immune = 0;
knockback = 0;
float = 0;

flash = 0;
alarm[0] = 2;

underwater = 0;
currentLeft = 0;
currentRight = 0;
underwater_jump = 0;

onLadder = 0;
ladderSpeed = 4;

hooked = 0;
frozen = 0;


talk = 0;

//controls
r_key = vk_right;
l_key = vk_left;
u_key = vk_up;
u_key2 = ord('Z');
d_key = vk_down;

u_pressed = 0;

font = font_add_sprite(sFont,ord('!'),0,0);

rescuedFriends = 0;

brightness = 10;
d3d_set_fog(1,c_black,0,brightness);


sprite = sMainIdle;
sprite_speed = .25;
sprite_frame = 0;


water_image = 0;

firstTeleport = 1;
teleportLeft = "room";
teleportRight = "left";
teleportRoom = "right";

screenshake = 0;
endNow = 0;

timing = 0;
time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(apocalevel &lt; 120){
    apocalevel += 1;

    brightness = brightness*.975;
        
    d3d_set_fog(1,c_black,0,brightness);
    
    oBackground.hue += 1.25;
    oBackground.sat += .75;
    
    //alarm[11] = 1;
    alarm[11] = 83;
    //alarm[11] = 57;
    if(apocalevel = 45){
        instance_create(oCharacter.x+200,oCharacter.y-200,oMeteor1);
        oBackground.alarm[1] = 20;
    }
    if(apocalevel = 57){
        oBackground.alarm[2] = 8;
    }
    if(apocalevel = 69){
        oBackground.alarm[6] = 8;
    }
    if(apocalevel = 81){
        oBackground.alarm[3] = 8;
    }
    if(apocalevel = 94){
        oBackground.alarm[4] = 8;
    }
    if(apocalevel = 107){
        oBackground.alarm[7] = 8;
    }
    if(endNow){
        alarm[11] = 1;
    }
    if(apocalevel = 119){
        alarm[10] = 76;
    }
    if(apocalevel = 120){
        if(!endNow){
            oBackground.alarm[5] = 10;
        }
        alarm[11] = 0;
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!endNow){
    room_speed = 15;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>highScore = highscore_value(1);

if(rescuedFriends &lt; 20){
    newScore = rescuedFriends;
}
else{
    newScore = 100000 - time;
}

highscore_add("best",newScore);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>talk = 0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(underwater){
    underwater_jump = 1;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flash = !flash;
alarm[0] = 2;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>FMODUpdate();
moved = 0;

xdiff = x-xprevious;
ydiff = y-yprevious;

with(oMeteor1){
    xoffset -= other.xdiff/4;
    yoffset -= other.ydiff/4;
}
with(oMeteor2){
    xoffset -= other.xdiff/2;
    yoffset -= other.ydiff/2;
}
if(joystick_exists(1)){
    if(joystick_check_button(1,1) || joystick_check_button(1,2) || joystick_check_button(1,3) || joystick_check_button(1,4)){
        u_pressed = 1;
    }
    else{
        u_pressed = 0;
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*instance_activate_all();
instance_deactivate_region(x-300,y-300,600,600,false,true);
instance_activate_object(oBackground);
instance_activate_object(oScreen);
instance_activate_object(oText);
instance_activate_object(oEndGame);
instance_activate_object(oGoodEnding);
instance_activate_object(oIceDragon);
instance_activate_object(oIceLaser);
instance_activate_object(oEyeballLeft);
instance_activate_object(oEyeballRight);
instance_activate_object(oEyeLaser);
instance_activate_object(oSuperWall);
instance_activate_object(oSuperEnemyTurn);
instance_activate_object(oSuperBear);
instance_activate_object(oSuperGoomba);
instance_activate_object(oSuperBeeLR);
instance_activate_object(oSuperBouncer);
instance_activate_object(oSuperSquid);
instance_activate_object(oSuperHook);
instance_activate_object(oSuperFish);
instance_activate_object(oSuperFloor);
instance_activate_object(oSuperPlatformUD);
instance_activate_object(oTeleporter);*/

if(timing){
    time += 1;
}

if(screenshake){
    view_object = -1;
    view_xview = oCharacter.x - view_wview/2 + random(16) - 8;
    view_yview = oCharacter.y - view_hview/2 + random(16) - 8;
}

if(place_meeting(x,y,oLadder) &amp;&amp; !onLadder &amp;&amp; u_check()){
    onLadder = 1;
    x = instance_nearest(x,y,oLadder).x+8;
    xmomentum = 0;
    ymomentum = 0;
    
    maxspeed = 0;
    air_accel = 0;
    grav = 0;
}
if(onLadder &amp;&amp; (!place_meeting(x,y,oLadder) || ((l_check() || r_check()) &amp;&amp; !u_check() &amp;&amp; !d_check()))){
    onLadder = 0;
    
    maxspeed = 4;
    air_accel = 1;
    grav = 1;
}

if(place_meeting(x,y,oWater) &amp;&amp; !underwater){
underwater = 1;

maxspeed = 2; //maximum speed on ground
accel = 1; //acceleration on ground
decel = 1; //rate of deceleration on the ground

jumpspeed = 5; //strength of jumps
maxjumpcount = 1;

alarm[1] = 3;

grav = .5; //gravity
maxairspeed = 3; //maximum speed in air
air_accel = 1.5; //acceleration in the air
air_decel = 1.5; //rate of deceleration in the air
maxfallspeed = 1; //the maximum speed at which the character falls naturally
minfallspeed = 5; //the maximum speed at which the character moves up naturally
fastfall_accel = .5;
}
else if(!place_meeting(x,y,oWater) &amp;&amp; underwater &amp;&amp; !hooked){
underwater = 0;
underwater_jump = 0;

maxspeed = 4; //maximum speed on ground
accel = 2; //acceleration on ground
decel = 2; //rate of deceleration on the ground

jumpspeed = 6; //strength of jumps
maxjumpcount = 6;

if(currentLeft){
    xmomentum = -4;
}
if(currentRight){
    xmomentum = 4;
}

grav = 1; //gravity
maxairspeed = 4; //maximum speed in air
air_accel = 1; //acceleration in the air
air_decel = 1; //rate of deceleration in the air
maxfallspeed = 12; //the maximum speed at which the character falls naturally
minfallspeed = 12; //the maximum speed at which the character moves up naturally
fastfall_accel = 0;
}

if(underwater){
    if(d_check()){
        maxfallspeed = 5;
    }
    else{
        maxfallspeed = 1;
    }
}

if(place_meeting(x,y,oCurrentLeft)){
    shiftx(-5, 1);
    currentLeft = 1;
}
else{
    currentLeft = 0;
}
if(place_meeting(x,y,oCurrentRight)){
    shiftx(5, 1);
    currentRight = 1;
}
else{
    currentRight = 0;
}
if(place_meeting(x,y,oCurrentUp)){
    shifty(-5, 1);
}
if(place_meeting(x,y,oCurrentDown)){
    shifty(5, 1);
}

water_image += 1;
if(water_image = 4){
    water_image = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//determines whether or not character is on the ground
if( ( place_meeting(x,y+1,oWall) || ( place_meeting(x,y+1,oFloor) &amp;&amp; !place_meeting(x,y,oFloor) ) ) &amp;&amp; ymomentum &gt;= 0 ){
    //resets jump-based variables
    onground = 1;
    jumpcount = maxjumpcount;
    jumping = 0;
    jump_forgiveness = 3;
}
else{
    onground = 0;
    jump_forgiveness -= 1;
}

//change facing when pushing left or right
if(l_check()){
    xscale = -1;
}
if(r_check()){
    xscale = 1;
}

if(onLadder){
    if(u_check()){
        ymomentum = -ladderSpeed;
    }
    else if(d_check()){
        ymomentum = ladderSpeed;
    }
    else{
        ymomentum = 0;
    }
}

//character drops through floors upon pressing down
//if(d_press() &amp;&amp; place_meeting(x,y+1,oFloor) &amp;&amp; !place_meeting(x,y,oFloor) &amp;&amp; !place_meeting(x,y+1,oSemisolid)){
//    y += 1;
//}

//move left or right, or gradually decelerate
if(r_check()){
    //accelerate character
    if( xmomentum &lt; maxspeed &amp;&amp; onground ){
        xmomentum += accel;
    }
    if( xmomentum &lt; maxairspeed &amp;&amp; !onground ){
        xmomentum += air_accel;
    }
}
else if(l_check()){
    //accelerate character
    if( xmomentum &gt; -maxspeed &amp;&amp; onground ){
        xmomentum -= accel;
    }
    if( xmomentum &gt; -maxairspeed &amp;&amp; !onground ){
        xmomentum -= air_accel;
    }
}
//if not moving, decelerate
else if( onground &amp;&amp; !knockback ){
    if(xmomentum &gt;= decel){
        xmomentum -= decel;
    }
    else if(xmomentum &lt;= -decel){
        xmomentum += decel;
    }
    else if(abs(xmomentum) &lt; decel){
        xmomentum = 0;
    }
}
else if( !onground &amp;&amp; !knockback ){
    if(xmomentum &gt;= air_decel){
        xmomentum -= air_decel;
    }
    else if(xmomentum &lt;= -air_decel){
        xmomentum += air_decel;
    }
    else if(abs(xmomentum) &lt; air_decel){
        xmomentum = 0;
    }
}

//if character is in the air, it accelerates due to gravity
if( !onground &amp;&amp; !float ){
    ymomentum += grav;
}

//Holding down in the air increases falling speed
if(d_check() &amp;&amp; !onground){
    ymomentum += fastfall_accel;
}

if(u_press() &amp;&amp; (onground || jump_forgiveness &gt; 0 || underwater_jump) &amp;&amp; !hooked){
    jumping = 1;
    ymomentum = -jumpspeed;
    jump_forgiveness = 0;
    FMODSoundPlay(jump);
}

if(u_release() &amp;&amp; jumping){
    jumping = 0;
}

if(u_check() &amp;&amp; jumpcount &gt; 0 &amp;&amp; jumping = 1){
    jumpcount -= 1;
    ymomentum = -jumpspeed;
}

//decelerate faster if above max speed
if(!knockback){
    if(xmomentum &lt; -maxspeed &amp;&amp; onground){
        if(xmomentum &lt; -maxspeed -2){
            xmomentum += 2;
        }
        else{
            xmomentum = -maxspeed;
        }
    }
    if(xmomentum &lt; -maxairspeed &amp;&amp; !onground){
        if(xmomentum &lt; -maxairspeed -2){
            xmomentum += 2;
        }
        else{
            xmomentum = -maxairspeed;
        }
    }
    if(xmomentum &gt; maxspeed &amp;&amp; onground){
        if(xmomentum &gt; maxspeed + 2){
            xmomentum -= 2;
        }
        else{
            xmomentum = maxspeed;
        }
    }
    if(xmomentum &gt; maxairspeed &amp;&amp; !onground){
        if(xmomentum &gt; maxairspeed + 2){
            xmomentum -= 2;
        }
        else{
            xmomentum = maxairspeed;
        }
    }
    if(ymomentum &gt; maxfallspeed){
        if(ymomentum &gt; maxfallspeed + 2){
            ymomentum -= 2;
        }
        else{
            ymomentum = maxfallspeed;
        }
    }
    /*if(ymomentum &lt; -minfallspeed){
        if(ymomentum &lt; -minfallspeed - 2){
            ymomentum += 2;
        }
        else{
            ymomentum = -minfallspeed;
        }
    }*/
}

shifty(ymomentum,1);
shiftx(xmomentum,1);

/*if(ymomentum &gt; 0 &amp;&amp; place_meeting(x,y,oWidePlatformUD) &amp;&amp; !place_meeting(x,y-ymomentum*2,oWidePlatformUD)){
    shifty(-ymomentum*2,1);
    shifty(ymomentum*2,1);
}*/

if(stun &gt; 0){
    stun -= 1;
}
if(knockback &gt; 0){
    knockback -= 1;
}
if(immune &gt; 0){
    immune -= 1;
}
if(float &gt; 0){
    float -= 1;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//d3d_set_fog(1,c_black,0,brightness);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*FMODSoundFree(music1);
FMODSoundFree(hit);
FMODSoundFree(collect);
FMODSoundFree(jump);
FMODSoundFree(boing);
FMODSoundFree(port);
FMODSoundFree(freeze);
FMODSoundFree(shatter);
FMODSoundFree(ending);

FMODfree();
UnloadFMOD();

sprite_delete(sFrozen);
sprite_delete(sWindow3);
sprite_delete(sWindow);
sprite_delete(sWindow5);
sprite_delete(sWindowSmall);
sprite_delete(sWindowSlant);
sprite_delete(sFactoryWindow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible){
if(frozen){
    draw_sprite(sFrozen,0,x,y);
}
else{
if(onground){
    if(l_check() || r_check()){
        if(sprite != sMainWalk){
            sprite = sMainWalk;
            sprite_frame = 0;
        }
    }
    else{
        sprite = sMainIdle;
    }
}
else{
    if(underwater){
        sprite = sMainSwim;
    }
    else{
        sprite = sMainJump;
    }
}

sprite_frame += sprite_speed;

if(!immune || flash){
    draw_sprite_ext(sprite,sprite_frame,x,y,xscale,1,0,c_white,1);
}
}

if(talk){
text = "I NEED TO GATHER MY #FRIENDS FOR THE PARTY";
text_width = string_width(text);
drawx = x-text_width/2;
if(drawx &lt; 16){
    drawx = 16;
}
if(drawx &gt; room_width - 16 - text_width){
    drawx = room_width -16 - text_width;
}
draw_text(drawx,y-14,text);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room = rStart){
    game_end();
}
else{
    game_restart();
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,-1</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
