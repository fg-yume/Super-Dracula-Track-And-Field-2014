<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_character</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//character stat variables (set to defaults here)
maxspeed = 8; //maximum speed on ground
accel = 4; //acceleration on ground
decel = 4; //rate of deceleration on the ground

jumpspeed = 6; //strength of jumps
maxjumpcount = 6;
jumpcount = maxjumpcount;
jumping = 0;

grav = 1; //gravity
maxairspeed = 12; //maximum speed in air
maxairaccel = 8; //maximum speed you can accelerate to in the air
maxairaccel_base = 8;
air_accel = 1; //acceleration in the air
air_decel = 1; //rate of deceleration in the air
maxfallspeed = 12; //the maximum speed at which the character falls naturally
minfallspeed = 12; //the maximum speed at which the character moves up naturally
fastfall_accel = 0;

doublejump = 0;

in_light = 0;

maxspeed_dark = 8; //maximum speed on ground
accel_dark = 4; //acceleration on ground
decel_dark = 4; //rate of deceleration on the ground
jumpspeed_dark = 6;
maxjumpcount_dark = 6;
maxairaccel_dark = 8; //maximum speed in air
airaccel_dark = 1;
airdecel_dark = 1;
doublejump_dark = 0;

maxspeed_light = 4; //maximum speed on ground
accel_light = 2; //acceleration on ground
decel_light = 2; //rate of deceleration on the ground
jumpspeed_light = 6;
maxjumpcount_light = 3;
maxairaccel_light = 4; //maximum speed in air
airaccel_light = 1;
airdecel_light = 1;
doublejump_light = 0;

batmode = 0;
maxspeed_bat = 10; //maximum speed on ground
accel_bat = 5; //acceleration on ground
decel_bat = 5; //rate of deceleration on the ground
jumpspeed_bat = 8;
maxjumpcount_bat = 1;
maxairaccel_bat = 10; //maximum speed in air
airaccel_bat = 5;
airdecel_bat = 5;
doublejump_bat = 1;

//movement-related variables
xscale = 1; //direction character faces. 1 is right, -1 is left.
xmomentum = 0; //horizontal movement
ymomentum = 0; //vertical movement
onground = 0; //1 if the character is on solid ground
jump_forgiveness = 0; //allows character to jump immediately after walking off a platform

stun = 0;
immune = 0;
knockback = 0;
float = 0;

flash = 0;
alarm[0] = 2;

underwater = 0;
currentLeft = 0;
currentRight = 0;
underwater_jump = 0;

onLadder = 0;
ladderSpeed = 4;

hooked = 0;
frozen = 0;

blood = 0;




//font = font_add_sprite(sFont,ord('!'),0,0);


sprite = s_dracula_idle;
sprite_speed = .15;
sprite_frame = 0;

screenshake = 0;

timing = 0;
time = 0;
instance_create(-600,0,o_sun);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(underwater){
    underwater_jump = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flash = !flash;
alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moved = 0;

xdiff = x-xprevious;
ydiff = y-yprevious;

if(joystick_exists(1)){
    if(joystick_check_button(1,1) || joystick_check_button(1,2) || joystick_check_button(1,3) || joystick_check_button(1,4)){
        u_pressed = 1;
    }
    else{
        u_pressed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(timing){
//    time += 1;
//}

if(screenshake){
    view_object = -1;
    view_xview = oCharacter.x - view_wview/2 + random(16) - 8;
    view_yview = oCharacter.y - view_hview/2 + random(16) - 8;
}

/*if(place_meeting(x,y,oLadder) &amp;&amp; !onLadder &amp;&amp; u_check()){
    onLadder = 1;
    x = instance_nearest(x,y,oLadder).x+8;
    xmomentum = 0;
    ymomentum = 0;
    
    maxspeed = 0;
    air_accel = 0;
    grav = 0;
}
if(onLadder &amp;&amp; (!place_meeting(x,y,oLadder) || ((l_check() || r_check()) &amp;&amp; !u_check() &amp;&amp; !d_check()))){
    onLadder = 0;
    
    maxspeed = 4;
    air_accel = 1;
    grav = 1;
}*/


if(batmode){
    blood -= .03;
    if(blood &lt;= 0){
        batmode = 0;
        blood = 0;
    }
}
else{
if(space_check() &amp;&amp; blood == 5){
    audio_play_sound(fx_transform,0,false);
    batmode = 1;
    maxspeed = maxspeed_bat;
    accel = accel_bat;
    decel = decel_bat;
    jumpspeed = jumpspeed_bat;
    maxjumpcount = maxjumpcount_bat;
    maxairaccel_base = maxairaccel_bat;
    airaccel = airaccel_bat;
    airdecel = airdecel_bat;
    doublejump = doublejump_bat;
    maxairaccel = maxairaccel_base;
}
else if(place_meeting(x,y,o_light_volume)){
    in_light = 1;
    maxspeed = maxspeed_light;
    accel = accel_light;
    decel = decel_light;
    jumpspeed = jumpspeed_light;
    maxjumpcount = maxjumpcount_light;
    maxairaccel_base = maxairaccel_light;
    airaccel = airaccel_light;
    airdecel = airdecel_light;
    doublejump = doublejump_light;
}
else{
    in_light = 0;
    maxspeed = maxspeed_dark;
    accel = accel_dark;
    decel = decel_dark;
    jumpspeed = jumpspeed_dark;
    maxjumpcount = maxjumpcount_dark;
    maxairaccel_base = maxairaccel_dark;
    airaccel = airaccel_dark;
    airdecel = airdecel_dark;
    doublejump = doublejump_dark;
}
}

if(place_meeting(x,y,o_water) &amp;&amp; !underwater){
underwater = 1;

maxspeed = 2; //maximum speed on ground
accel = 1; //acceleration on ground
decel = 1; //rate of deceleration on the ground

jumpspeed = 5; //strength of jumps
maxjumpcount = 1;

alarm[1] = 3;

grav = .5; //gravity
maxairspeed = 3; //maximum speed in air
air_accel = 1.5; //acceleration in the air
air_decel = 1.5; //rate of deceleration in the air
maxfallspeed = 1; //the maximum speed at which the character falls naturally
minfallspeed = 5; //the maximum speed at which the character moves up naturally
fastfall_accel = .5;
}
else if(!place_meeting(x,y,o_water) &amp;&amp; underwater &amp;&amp; !hooked){
underwater = 0;
underwater_jump = 0;

maxspeed = 4; //maximum speed on ground
accel = 2; //acceleration on ground
decel = 2; //rate of deceleration on the ground

jumpspeed = 6; //strength of jumps
maxjumpcount = 6;

if(currentLeft){
    xmomentum = -4;
}
if(currentRight){
    xmomentum = 4;
}

grav = 1; //gravity
maxairspeed = 4; //maximum speed in air
air_accel = 1; //acceleration in the air
air_decel = 1; //rate of deceleration in the air
maxfallspeed = 12; //the maximum speed at which the character falls naturally
minfallspeed = 12; //the maximum speed at which the character moves up naturally
fastfall_accel = 0;
}

if(underwater){
    if(d_check()){
        maxfallspeed = 5;
    }
    else{
        maxfallspeed = 1;
    }
}

/*if(place_meeting(x,y,oCurrentLeft)){
    shiftx(-5, 1);
    currentLeft = 1;
}
else{
    currentLeft = 0;
}
if(place_meeting(x,y,oCurrentRight)){
    shiftx(5, 1);
    currentRight = 1;
}
else{
    currentRight = 0;
}
if(place_meeting(x,y,oCurrentUp)){
    shifty(-5, 1);
}
if(place_meeting(x,y,oCurrentDown)){
    shifty(5, 1);
}*/

/*water_image += 1;
if(water_image = 4){
    water_image = 0;
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//determines whether or not character is on the ground
if( ( place_meeting(x,y+1,o_wall) || ( place_meeting(x,y+1,o_floor) &amp;&amp; !place_meeting(x,y,o_floor) ) ) &amp;&amp; ymomentum &gt;= 0 ){
    
    //resets jump-based variables
    /*if onground = 0
    {
    audio_play_sound(fx_land, 0, false)
    }*/
    onground = 1;
    jumpcount = maxjumpcount;
    jumping = 0;
    jump_forgiveness = 3;
    maxairaccel = maxairaccel_base;
}
else{
    onground = 0;
    jump_forgiveness -= 1;
}

//change facing when pushing left or right
if(l_check()){
    xscale = -1;
}
if(r_check()){
    xscale = 1;
}

if(onLadder){
    if(u_check()){
        ymomentum = -ladderSpeed;
    }
    else if(d_check()){
        ymomentum = ladderSpeed;
    }
    else{
        ymomentum = 0;
    }
}

//character drops through floors upon pressing down
//if(d_press() &amp;&amp; place_meeting(x,y+1,o_floor) &amp;&amp; !place_meeting(x,y,o_floor)){
//    y += 1;
//}

//move left or right, or gradually decelerate
if(r_check()){
    //accelerate character
    if( xmomentum &lt; maxspeed &amp;&amp; onground ){
        xmomentum += accel;
    }
    if( xmomentum &lt; maxairaccel &amp;&amp; !onground ){
        xmomentum += air_accel;
    }
}
else if(l_check()){
    //accelerate character
    if( xmomentum &gt; -maxspeed &amp;&amp; onground ){
        xmomentum -= accel;
    }
    if( xmomentum &gt; -maxairaccel &amp;&amp; !onground ){
        xmomentum -= air_accel;
    }
}
//if not moving, decelerate
else if( onground &amp;&amp; !knockback ){
    if(xmomentum &gt;= decel){
        xmomentum -= decel;
    }
    else if(xmomentum &lt;= -decel){
        xmomentum += decel;
    }
    else if(abs(xmomentum) &lt; decel){
        xmomentum = 0;
    }
}
else if( !onground &amp;&amp; !knockback ){
    if(xmomentum &gt;= air_decel){
        xmomentum -= air_decel;
    }
    else if(xmomentum &lt;= -air_decel){
        xmomentum += air_decel;
    }
    else if(abs(xmomentum) &lt; air_decel){
        xmomentum = 0;
    }
}

//if character is in the air, it accelerates due to gravity
if( !onground &amp;&amp; !float ){
    ymomentum += grav;
}

//Holding down in the air increases falling speed
if(d_check() &amp;&amp; !onground){
    ymomentum += fastfall_accel;
}

if(u_press() &amp;&amp; (onground || jump_forgiveness &gt; 0 || underwater_jump) &amp;&amp; !hooked){
    jumping = 1;
    ymomentum = -jumpspeed;
    jump_forgiveness = 0;
    if batmode
    {
    audio_play_sound(fx_flap,0,false);
    }
    else
    audio_play_sound(fx_jump,0,false);
    //FMODSoundPlay(jump);
}

if(u_release() &amp;&amp; jumping){
    jumping = 0;
}

if(doublejump){
    if(u_press()){
        jumpcount -= 1;
        ymomentum = -jumpspeed;
    }
}
else{
    if(u_check() &amp;&amp; jumpcount &gt; 0 &amp;&amp; jumping = 1){
        jumpcount -= 1;
        ymomentum = -jumpspeed;
    }
}

//decelerate faster if above max speed
if(!knockback){
    if(xmomentum &lt; -maxspeed &amp;&amp; onground){
        if(xmomentum &lt; -maxspeed -2){
            xmomentum += 2;
        }
        else{
            xmomentum = -maxspeed;
        }
    }
    if(xmomentum &lt; -maxairspeed &amp;&amp; !onground){
        if(xmomentum &lt; -maxairspeed -2){
            xmomentum += 2;
        }
        else{
            xmomentum = -maxairspeed;
        }
    }
    if(xmomentum &gt; maxspeed &amp;&amp; onground){
        if(xmomentum &gt; maxspeed + 2){
            xmomentum -= 2;
        }
        else{
            xmomentum = maxspeed;
        }
    }
    if(xmomentum &gt; maxairspeed &amp;&amp; !onground){
        if(xmomentum &gt; maxairspeed + 2){
            xmomentum -= 2;
        }
        else{
            xmomentum = maxairspeed;
        }
    }
    if(ymomentum &gt; maxfallspeed){
        if(ymomentum &gt; maxfallspeed + 2){
            ymomentum -= 2;
        }
        else{
            ymomentum = maxfallspeed;
        }
    }
    /*if(ymomentum &lt; -minfallspeed){
        if(ymomentum &lt; -minfallspeed - 2){
            ymomentum += 2;
        }
        else{
            ymomentum = -minfallspeed;
        }
    }*/
}

shifty(ymomentum,1);
shiftx(xmomentum,1);

if(stun &gt; 0){
    stun -= 1;
}
if(knockback &gt; 0){
    knockback -= 1;
}
if(immune &gt; 0){
    immune -= 1;
}
if(float &gt; 0){
    float -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('1'))) {
    room = rm_Level1;
}
else if (keyboard_check_pressed(ord('2'))) {
    room = rm_Level2;
}
else if (keyboard_check_pressed(ord('3'))) {
    room = rm_Level3;
}
else if (keyboard_check_pressed(ord('4'))) {
    room = rm_Level4;
}
else if (keyboard_check_pressed(ord('5'))) {
    room = rm_Level5;
}
if (keyboard_check_pressed(ord('0'))) {
    room_goto_next();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_sun">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
audio_play_sound(fx_sundie, 0, false);
o_controller.dead = 1;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible){
if(frozen){
    //draw_sprite(sFrozen,0,x,y);
}
else{
if(onground){
    if(l_check() || r_check()){
        if(batmode){
            sprite = s_dracula_bat;
            sprite_speed = .25;
        }
        else if(in_light){
        if(sprite != s_dracula_walk){
            sprite = s_dracula_walk;
            sprite_speed = .5;
            sprite_frame = 0;
        }
        }
        else{
        if(sprite != s_dracula_run){
            sprite = s_dracula_run;
            sprite_speed = .5;
            sprite_frame = 0;
        }
        }
    }
    else{
        if(batmode){
            sprite = s_dracula_bat;
            sprite_speed = 0;
            sprite_frame = 0;
        }
        else{
        sprite = s_dracula_idle;
        sprite_speed = .15;
        }
    }
}
else{
    /*if(underwater){
        //sprite = sMainSwim;
    }
    else{
        //sprite = sMainJump;
    }*/
    if(ymomentum &lt; 0){
        if(batmode){
            sprite = s_dracula_bat;
            sprite_speed = 0;
            sprite_frame = 1;
        }
        else{
            sprite = s_dracula_jumpup;
        }
    }
    else{
        if(batmode){
            sprite = s_dracula_bat;
            sprite_speed = 0;
            sprite_frame = 0;
        }
        else{
            sprite = s_dracula_jumpdown;
        }
    }
}

sprite_frame += sprite_speed;

if(!immune || flash){
    draw_sprite_ext(sprite,sprite_frame,x,y,xscale,1,0,c_white,1);
}
}

/*if(talk){
text = "I NEED TO GATHER MY #FRIENDS FOR THE PARTY";
text_width = string_width(text);
drawx = x-text_width/2;
if(drawx &lt; 16){
    drawx = 16;
}
if(drawx &gt; room_width - 16 - text_width){
    drawx = room_width -16 - text_width;
}
draw_text(drawx,y-14,text);
}*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,-1</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
